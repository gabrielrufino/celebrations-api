name: Continuous Delivery

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Setup machine using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            if [ ! $(which docker) ]
            then
              apt remove docker docker-engine docker.io containerd runc -y
              apt update
              apt install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release -y
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            fi
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy using SSH
        uses: appleboy/ssh-action@master
        env:
          PROD_ADMIN_JWT_SECRET: ${{ secrets.PROD_ADMIN_JWT_SECRET }}
          PROD_API_TOKEN_SALT: ${{ secrets.PROD_API_TOKEN_SALT }}
          PROD_APP_KEYS: ${{ secrets.PROD_APP_KEYS }}
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          PROD_PORT: ${{ secrets.PROD_PORT }}
          PROD_URL: ${{ secrets.PROD_URL }}
          PROD_REPOSITORY_FOLDER: ${{ secrets.PROD_REPOSITORY_FOLDER }}
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          PROD_SMTP_HOST: ${{ secrets.PROD_SMTP_HOST }}
          PROD_SMTP_PORT: ${{ secrets.PROD_SMTP_PORT }}
          PROD_SMTP_USERNAME: ${{ secrets.PROD_SMTP_USERNAME }}
          PROD_SMTP_PASSWORD: ${{ secrets.PROD_SMTP_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          envs: PROD_ADMIN_JWT_SECRET,PROD_API_TOKEN_SALT,PROD_APP_KEYS,PROD_HOST,PROD_JWT_SECRET,PROD_PORT,PROD_URL,PROD_REPOSITORY_FOLDER,PROD_DATABASE_URL,PROD_SMTP_HOST,PROD_SMTP_PORT,PROD_SMTP_USERNAME,PROD_SMTP_PASSWORD
          script: |
            if [ ! -d $PROD_REPOSITORY_FOLDER ]
            then
              git clone https://github.com/gabrielrufino/celebrations-api.git $PROD_REPOSITORY_FOLDER
              touch .env
            fi
            cd $PROD_REPOSITORY_FOLDER
            git restore .
            git pull origin main
            echo "ADMIN_JWT_SECRET=$PROD_ADMIN_JWT_SECRET" > .env
            echo "API_TOKEN_SALT=$PROD_API_TOKEN_SALT" >> .env
            echo "APP_KEYS=$PROD_APP_KEYS" >> .env
            echo "JWT_SECRET=$PROD_JWT_SECRET" >> .env
            echo "HOST=$PROD_HOST" >> .env
            echo "PORT=$PROD_PORT" >> .env
            echo "URL=$PROD_URL" >> .env
            echo "DATABASE_URL=$PROD_DATABASE_URL" >> .env
            echo "SMTP_HOST=$PROD_SMTP_HOST" >> .env
            echo "SMTP_PORT=$PROD_SMTP_PORT" >> .env
            echo "SMTP_USERNAME=$PROD_SMTP_USERNAME" >> .env
            echo "SMTP_PASSWORD=$PROD_SMTP_PASSWORD" >> .env
            docker compose up -d --build
      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Celebrations API

            Deploy succeeded.
