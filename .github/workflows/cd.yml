name: Continuous Delivery

on:
  workflow_run:
    workflows: ['Continuous Integration']
    types:
      - completed
    branches:
      - main
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: extract
        run: echo version=$(npm pkg get version | sed 's/"//g') >> "$GITHUB_OUTPUT"
    outputs:
      version:  ${{ steps.extract.outputs.version }}
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Setup docker using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_SSH_USER }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          script: |
            if [ ! $(which docker) ]
            then
              apt remove docker docker-engine docker.io containerd runc -y
              apt update
              apt install \
                ca-certificates \
                curl \
                gnupg \
                lsb-release -y
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
                $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt update
              apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
            fi
  nginx:
    runs-on: ubuntu-latest

    steps:
      - name: Setup nginx using SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_SSH_USER }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          script: |
            if [ ! $(which nginx) ]
            then
              apt update
              apt install nginx -y
            fi
  build:
    runs-on: ubuntu-latest
    needs:
      - version
    env:
      VERSION: ${{ needs.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          docker image build \
            -t celebrations-api:latest \
            -t celebrations-api:$VERSION \
            .
      - run: |
          docker image save \
            -o celebrations-api.tar \
            celebrations-api:latest \
            celebrations-api:$VERSION
      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_SSH_USER }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          source: celebrations-api.tar
          target: /var/www/celebrations-api/
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - docker
      - nginx
    steps:
      - name: Deploy using SSH
        uses: appleboy/ssh-action@v0.1.7
        env:
          VERSION: ${{ needs.version.outputs.version }}
          PROD_ADMIN_JWT_SECRET: ${{ secrets.PROD_ADMIN_JWT_SECRET }}
          PROD_API_TOKEN_SALT: ${{ secrets.PROD_API_TOKEN_SALT }}
          PROD_APP_KEYS: ${{ secrets.PROD_APP_KEYS }}
          PROD_HOST: ${{ secrets.PROD_HOST }}
          PROD_JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
          PROD_PORT: ${{ secrets.PROD_PORT }}
          PROD_URL: ${{ secrets.PROD_URL }}
          PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          PROD_SMTP_HOST: ${{ secrets.PROD_SMTP_HOST }}
          PROD_SMTP_PORT: ${{ secrets.PROD_SMTP_PORT }}
          PROD_SMTP_USERNAME: ${{ secrets.PROD_SMTP_USERNAME }}
          PROD_SMTP_PASSWORD: ${{ secrets.PROD_SMTP_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          username: ${{ secrets.SERVER_SSH_USER }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          envs: VERSION,PROD_ADMIN_JWT_SECRET,PROD_API_TOKEN_SALT,PROD_APP_KEYS,PROD_HOST,PROD_JWT_SECRET,PROD_PORT,PROD_URL,PROD_DATABASE_URL,PROD_SMTP_HOST,PROD_SMTP_PORT,PROD_SMTP_USERNAME,PROD_SMTP_PASSWORD
          script: |
            PROD_REPOSITORY_FOLDER=/var/www/celebrations-api
            if [ ! -d $PROD_REPOSITORY_FOLDER ]
            then
              mkdir -p $PROD_REPOSITORY_FOLDER
            fi
            cd $PROD_REPOSITORY_FOLDER
            docker load -i celebrations-api.tar
            rm celebrations-api.tar
            wget -O docker-compose.yml https://raw.githubusercontent.com/gabrielrufino/celebrations-api/main/.deploy/docker-compose.yml
            echo "IMAGE_VERSION=$VERSION" > .env
            echo "ADMIN_JWT_SECRET=$PROD_ADMIN_JWT_SECRET" >> .env
            echo "API_TOKEN_SALT=$PROD_API_TOKEN_SALT" >> .env
            echo "APP_KEYS=$PROD_APP_KEYS" >> .env
            echo "JWT_SECRET=$PROD_JWT_SECRET" >> .env
            echo "HOST=$PROD_HOST" >> .env
            echo "PORT=$PROD_PORT" >> .env
            echo "URL=$PROD_URL" >> .env
            echo "DATABASE_URL=$PROD_DATABASE_URL" >> .env
            echo "SMTP_HOST=$PROD_SMTP_HOST" >> .env
            echo "SMTP_PORT=$PROD_SMTP_PORT" >> .env
            echo "SMTP_USERNAME=$PROD_SMTP_USERNAME" >> .env
            echo "SMTP_PASSWORD=$PROD_SMTP_PASSWORD" >> .env
            docker compose up blue -d
            timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:1336/_health)" != "204" ]]; do sleep 5; done' || false \
              && docker compose up green -d
            docker compose stop blue
            rm .env
            docker image prune -a -f
      - name: Telegram Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Celebrations API

            Deploy succeeded.
